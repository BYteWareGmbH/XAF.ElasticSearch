// <auto-generated>
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Templates;
using DevExpress.ExpressApp.Templates.ActionControls;
using DevExpress.ExpressApp.Utils;
using DevExpress.ExpressApp.Win.Controls;
using DevExpress.ExpressApp.Win.SystemModule;
using DevExpress.ExpressApp.Win.Templates;
using DevExpress.ExpressApp.Win.Templates.Utils;
using DevExpress.XtraBars;
using DevExpress.XtraBars.Docking;
using DevExpress.XtraBars.Docking2010;
using DevExpress.XtraEditors;

namespace BYteWare.XAF.ElasticSearch.Win.Template
{
    [CLSCompliant(false)]
    public partial class MainFormDynamicActionContainer : XtraForm, IActionControlsSite, IContextMenuHolder, IWindowTemplate, IDockManagerHolder, IBarManagerHolder, ISupportViewChanged, IXafDocumentsHostWindow, ISupportUpdate, IViewSiteTemplate, ISupportStoreSettings, IViewHolder, INavigationPanelHolder, IDynamicContainersTemplate
    {
        private static readonly object viewChanged = new object();
        private static readonly object settingsReloaded = new object();
        private UIType uiType;
        private StatusMessagesHelper statusMessagesHelper;


        /// <summary>
        /// Returns the Action Container Manager
        /// </summary>
        public ActionContainersManager ActionContainersManager
        {
            get
            {
                return actionContainersManager;
            }
        }

        /// <summary>
        /// Event that is called if an Action Container was changed
        /// </summary>
        public event EventHandler<ActionContainersChangedEventArgs> ActionContainersChanged;

        /// <summary>
        /// Registers the Enumeration of Action Containers
        /// </summary>
        /// <param name="actionContainers">Enumeration of Action Containers</param>
        public void RegisterActionContainers(IEnumerable<IActionContainer> actionContainers)
        {
            if (actionContainers != null)
            {
                ActionContainersManager.ActionContainerComponents.AddRange(actionContainers);
                OnActionContainersChanged(new ActionContainersChangedEventArgs(actionContainers, ActionContainersChangedType.Added));
            }
        }

        /// <summary>
        /// Unregisters the Enumeration of Action Containers
        /// </summary>
        /// <param name="actionContainers">Enumeration of Action Containers</param>
        public void UnregisterActionContainers(IEnumerable<IActionContainer> actionContainers)
        {
            if (actionContainers != null)
            {
                foreach (IActionContainer actionContainer in actionContainers)
                {
                    ActionContainersManager.ActionContainerComponents.Remove(actionContainer);
                }
                OnActionContainersChanged(new ActionContainersChangedEventArgs(actionContainers, ActionContainersChangedType.Removed));
            }
        }

        /// <summary>
        /// Calls the Event Handlers of ActionContainersChanged
        /// </summary>
        /// <param name="e">The ActionContainersChanged Event Arguments to pass</param>
        protected virtual void OnActionContainersChanged(ActionContainersChangedEventArgs e)
        {
            ActionContainersChanged?.Invoke(this, e);
        }

        protected virtual void InitializeImages()
        {
            barMdiChildrenListItem.Glyph = ImageLoader.Instance.GetImageInfo("Action_WindowList").Image;
            barMdiChildrenListItem.LargeGlyph = ImageLoader.Instance.GetLargeImageInfo("Action_WindowList").Image;
            barSubItemPanels.Glyph = ImageLoader.Instance.GetImageInfo("Action_Navigation").Image;
            barSubItemPanels.LargeGlyph = ImageLoader.Instance.GetLargeImageInfo("Action_Navigation").Image;
        }
        protected virtual void OnUITypeChanged()
        {
            UIType uiType = ((IXafDocumentsHostWindow)this).UIType;
            if (uiType == UIType.TabbedMDI)
            {
                SetupTabbedMdi();
            }
            else if (uiType == UIType.StandardMDI)
            {
                SetupStandardMdi();
            }
            else
            {
                SetupSdi();
            }
        }
        protected void SetupSdi()
        {
            barManager.MdiMenuMergeStyle = BarMdiMenuMergeStyle.Never;
            documentManager.View = noDocumentsView;
            documentManager.ViewCollection.Remove(nativeMdiView);
            documentManager.ViewCollection.Remove(tabbedView);
            viewSitePanel.Visible = true;
            documentManager.ClientControl = viewSitePanel;
            barMdiChildrenListItem.Visibility = BarItemVisibility.Never;
        }
        protected void SetupStandardMdi()
        {
            barManager.MdiMenuMergeStyle = BarMdiMenuMergeStyle.OnlyWhenChildMaximized;
            documentManager.View = nativeMdiView;
            documentManager.ViewCollection.Remove(noDocumentsView);
            documentManager.ViewCollection.Remove(tabbedView);
            SetupMdiCommon();
        }
        protected void SetupTabbedMdi()
        {
            barManager.MdiMenuMergeStyle = BarMdiMenuMergeStyle.Always;
            documentManager.View = tabbedView;
            documentManager.ViewCollection.Remove(noDocumentsView);
            documentManager.ViewCollection.Remove(nativeMdiView);
            SetupMdiCommon();
        }
        private void SetupMdiCommon()
        {
            viewSitePanel.Visible = false;
            documentManager.MdiParent = this;
            barMdiChildrenListItem.Visibility = BarItemVisibility.Always;
        }

        protected virtual void RaiseViewChanged(DevExpress.ExpressApp.View view)
        {
            EventHandler<TemplateViewChangedEventArgs> handler = (EventHandler<TemplateViewChangedEventArgs>)Events[viewChanged];
            if (handler != null)
            {
                handler(this, new TemplateViewChangedEventArgs(view));
            }
        }
        protected virtual void RaiseSettingsReloaded()
        {
            EventHandler handler = (EventHandler)Events[settingsReloaded];
            if (handler != null)
            {
                handler(this, EventArgs.Empty);
            }
        }

        protected override FormShowMode ShowMode
        {
            get
            {
                return FormShowMode.AfterInitialization;
            }
        }

        public MainFormDynamicActionContainer()
        {
            InitializeComponent();
            InitializeImages();
            barManager.ForceLinkCreate();
            statusMessagesHelper = new StatusMessagesHelper(barContainerStatusMessages);
            OnUITypeChanged();
            ActionContainersManager.ActionContainerComponents.Add(navigation);
        }

        #region IActionControlsSite Members
        IEnumerable<IActionControl> IActionControlsSite.ActionControls
        {
            get
            {
                return barManager.ActionControls;
            }
        }
        IEnumerable<IActionControlContainer> IActionControlsSite.ActionContainers
        {
            get
            {
                return barManager.ActionContainers;
            }
        }
        IActionControlContainer IActionControlsSite.DefaultContainer
        {
            get
            {
                return actionContainerDefault;
            }
        }
        #endregion

        #region IFrameTemplate Members
        void IFrameTemplate.SetView(DevExpress.ExpressApp.View view)
        {
            viewSiteManager.SetView(view);
            RaiseViewChanged(view);
        }

        ICollection<IActionContainer> IFrameTemplate.GetContainers()
        {
            return actionContainersManager.GetContainers();
        }

        IActionContainer IFrameTemplate.DefaultContainer
        {
            get
            {
                return actionContainersManager.DefaultContainer;
            }
        }
        #endregion

        #region IWindowTemplate Members
        void IWindowTemplate.SetCaption(string caption)
        {
            Text = caption;
        }
        void IWindowTemplate.SetStatus(ICollection<string> statusMessages)
        {
            statusMessagesHelper.SetMessages(statusMessages);
        }
        bool IWindowTemplate.IsSizeable
        {
            get
            {
                return FormBorderStyle == FormBorderStyle.Sizable;
            }
            set
            {
                FormBorderStyle = (value ? FormBorderStyle.Sizable : FormBorderStyle.FixedDialog);
            }
        }
        #endregion

        #region IBarManagerHolder Members
        BarManager IBarManagerHolder.BarManager
        {
            get
            {
                return barManager;
            }
        }
        event EventHandler IBarManagerHolder.BarManagerChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        #endregion

        #region IDockManagerHolder Members
        DevExpress.XtraBars.Docking.DockManager IDockManagerHolder.DockManager
        {
            get
            {
                return dockManager;
            }
        }
        #endregion

        #region IContextMenuHolder
        PopupMenu IContextMenuHolder.ContextMenu
        {
            get
            {
                return contextMenu;
            }
        }
        #endregion

        #region ISupportViewChanged Members
        event EventHandler<TemplateViewChangedEventArgs> ISupportViewChanged.ViewChanged
        {
            add
            {
                Events.AddHandler(viewChanged, value);
            }
            remove
            {
                Events.RemoveHandler(viewChanged, value);
            }
        }
        #endregion

        #region IDocumentsHostWindow Members
        bool IDocumentsHostWindow.DestroyOnRemovingChildren
        {
            get
            {
                return true;
            }
        }
        DocumentManager IDocumentsHostWindow.DocumentManager
        {
            get
            {
                return documentManager;
            }
        }
        #endregion

        #region IXafDocumentsHostWindow Members
        UIType IXafDocumentsHostWindow.UIType
        {
            get
            {
                return uiType;
            }
            set
            {
                if (uiType != value)
                {
                    uiType = value;
                    OnUITypeChanged();
                }
            }
        }
        #endregion

        #region ISupportUpdate Members
        void ISupportUpdate.BeginUpdate()
        {
            barManager.BeginUpdate();
        }
        void ISupportUpdate.EndUpdate()
        {
            barManager.EndUpdate();
        }
        #endregion

        #region IViewSiteTemplate Members
        object IViewSiteTemplate.ViewSiteControl
        {
            get
            {
                return viewSiteManager.ViewSiteControl;
            }
        }
        #endregion

        #region ISupportStoreSettings Members
        void ISupportStoreSettings.SetSettings(IModelTemplate settings)
        {
            IModelTemplateWin templateModel = (IModelTemplateWin)settings;
            TemplatesHelper templatesHelper = new TemplatesHelper(templateModel);
            formStateModelSynchronizer.Model = templatesHelper.GetFormStateNode();
            navigation.Model = templatesHelper.GetNavBarCustomizationNode();
        }
        void ISupportStoreSettings.ReloadSettings()
        {
            modelSynchronizationManager.ApplyModel();
            RaiseSettingsReloaded();
        }
        void ISupportStoreSettings.SaveSettings()
        {
            SuspendLayout();
            try
            {
                modelSynchronizationManager.SynchronizeModel();
            }
            finally
            {
                ResumeLayout();
            }
        }
        event EventHandler ISupportStoreSettings.SettingsReloaded
        {
            add
            {
                Events.AddHandler(settingsReloaded, value);
            }
            remove
            {
                Events.RemoveHandler(settingsReloaded, value);
            }
        }
        #endregion

        #region IViewHolder Members
        DevExpress.ExpressApp.View IViewHolder.View
        {
            get
            {
                return viewSiteManager.View;
            }
        }
        #endregion

        #region INavigationPanelHolder Members
        DockPanel INavigationPanelHolder.DockPanelNavigation
        {
            get
            {
                return dockPanelNavigation;
            }
        }
        #endregion
    }
}
